// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model TradingSession {
  id                String   @id @default(cuid())
  sessionId         String   @unique
  mode              String   // 'backtest' or 'live'
  startTime         DateTime
  endTime           DateTime?
  initialBalance    Float
  currentBalance    Float
  totalTrades       Int      @default(0)
  winningTrades     Int      @default(0)
  totalProfit       Float    @default(0)
  maxDrawdown       Float    @default(0)
  sharpeRatio       Float    @default(0)
  kellyUtilization  Float    @default(0)
  marketsAnalyzed   Int      @default(0)
  newsProcessed     Int      @default(0)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  trades            Trade[]
  analyses          MarketAnalysis[]
  
  @@map("trading_sessions")
}

model Trade {
  id                String   @id @default(cuid())
  sessionId         String
  marketId          String
  question          String
  action            String   // 'BUY', 'SELL', 'HOLD'
  outcome           String   // 'YES', 'NO'
  amount            Float
  entryPrice        Float
  exitPrice         Float?
  shares            Float?
  profit            Float?
  confidence        Float
  strategyType      String
  reasoning         String
  riskAssessment    String
  expectedReturn    Float
  timeSensitivity   String
  marketConditions  Json
  supportingEvidence Json
  contrarianFactors Json
  entryTime         DateTime
  exitTime          DateTime?
  resolved          Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  session           TradingSession @relation(fields: [sessionId], references: [sessionId])
  
  @@map("trades")
}

model MarketAnalysis {
  id                    String   @id @default(cuid())
  sessionId             String
  marketId              String
  question              String
  currentProbability    Float
  aiProbability         Float
  confidence            Float
  edge                  Float
  sentimentScore        Float
  arbitrageOpportunities Json
  technicalIndicators   Json
  orderBookAnalysis     Json
  liquidityAssessment   Json
  riskFactors           Json
  tradingSignals        Json
  reasoning             String
  recommendedAction     String
  positionSize          Float
  expectedValue         Float
  timeHorizon           String
  analysisTime          DateTime
  createdAt             DateTime @default(now())
  
  session               TradingSession @relation(fields: [sessionId], references: [sessionId])
  
  @@map("market_analyses")
}

model BacktestResult {
  id                String   @id @default(cuid())
  sessionId         String   @unique
  startDate         DateTime
  endDate           DateTime
  initialBalance    Float
  finalBalance      Float
  totalProfit       Float
  totalRoi          Float
  totalTrades       Int
  winningTrades     Int
  losingTrades      Int
  winRate           Float
  sharpeRatio       Float
  maxDrawdown       Float
  kellyUtilization  Float
  marketsAnalyzed   Int
  avgTradeSize      Float
  largestWin        Float
  largestLoss       Float
  avgProfitPerTrade Float
  dailyReturns      Json
  balanceHistory    Json
  performanceMetrics Json
  createdAt         DateTime @default(now())
  
  @@map("backtest_results")
}

model NewsEvent {
  id          String   @id @default(cuid())
  title       String
  content     String
  source      String
  url         String?
  publishedAt DateTime
  sentiment   Float?
  relevance   Float?
  impact      String?  // 'high', 'medium', 'low'
  keywords    Json
  relatedMarkets Json
  createdAt   DateTime @default(now())
  
  @@map("news_events")
}

model PerformanceMetric {
  id          String   @id @default(cuid())
  sessionId   String
  metricType  String   // 'daily_return', 'portfolio_value', 'risk_metric'
  value       Float
  timestamp   DateTime
  metadata    Json?
  createdAt   DateTime @default(now())
  
  @@map("performance_metrics")
}
